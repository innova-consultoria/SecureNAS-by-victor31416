# üß© INSTALACI√ìN Y CONFIGURACI√ìN (GitHub en Debian) 
PROYECTO SNAS (Secure Network Attached Storage)

üìÖ Fecha: 20 de octubre de 2025

üîç Auditor√≠a realizada por: Consultor√≠a Innova

## Gu√≠a t√©cnica reproducible para sincronizaci√≥n local y remota

Este documento explica c√≥mo instalar Git, configurar el entorno local en Debian, y sincronizar un repositorio GitHub paso a paso. Est√° basado en la instalaci√≥n real del proyecto SecureNAS en `/root/GitHub_SNAS/`.

---

## 1. Instalaci√≥n de Git y dependencias

```bash
apt update
apt install git curl -y
```

## 2. Configuraci√≥n de identidad Git

```bash
git config --global user.name "innova-consultoria"
git config --global user.email "innova.satmadrid@gmail.com"
```

Puedes verificarlo con:

```bash
git config --list
```

## 3. Creaci√≥n de directorio local y permisos

```bash
mkdir -p /root/GitHub_SNAS
chmod 700 /root/GitHub_SNAS
cd /root/GitHub_SNAS
```

Este directorio contendr√° el repositorio clonado y debe tener acceso restringido.

## 4. Autenticaci√≥n con GitHub

### Opci√≥n A: Token personal (recomendado para HTTPS)
- Ve a GitHub ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens
- Crea un token con permisos repo y workflow
- Guarda el token en un gestor seguro

### Opci√≥n B: Usuario + contrase√±a (obsoleto)
GitHub ha deshabilitado la autenticaci√≥n por contrase√±a para operaciones Git. Usa token o SSH.

## 5. Clonaci√≥n del repositorio desde GitHub

```bash
git clone https://<TOKEN>@github.com/innova-consultoria/SecureNAS-by-victor31416.git GitHub_SNAS
cd GitHub_SNAS
```

üîê Sustituye `<TOKEN>` por tu token personal. Ejemplo:

```bash
https://ghp_abc123xyz456@github.com/innova-consultoria/SecureNAS-by-victor31416.git
```

## 6. Verificaci√≥n del estado del repositorio

```bash
git status
git branch
```

Salida esperada:

```
En la rama main
Tu rama est√° actualizada con 'origin/main'.
```

## 7. Sincronizaci√≥n desde el sistema (local ‚Üí remoto)

```bash
git add .
git commit -m "Actualizaci√≥n desde Debian"
git push origin main
```

## 8. Sincronizaci√≥n desde la web (remoto ‚Üí local)

```bash
git pull origin main
```

Esto traer√° los √∫ltimos cambios realizados desde GitHub Web o por otros colaboradores.

## 9. Sincronizaci√≥n dual (bidireccional)

Para mantener el sistema sincronizado en ambas direcciones:

```bash
# Paso 1: Obtener cambios remotos
git pull origin main

# Paso 2: Aplicar cambios locales
git add .
git commit -m "Cambios locales"
git push origin main
```

## 10. Verificaci√≥n del historial de commits

```bash
git log --oneline --graph --decorate
```

Esto muestra el √°rbol de commits y confirma que est√°s sincronizado con origin/main.

## 11. Automatizaci√≥n opcional (cron diario)

```bash
crontab -e
```

Agrega la siguiente l√≠nea para sincronizar cada d√≠a a las 03:00:

```bash
0 3 * * * cd /root/GitHub_SNAS/SecureNAS-by-victor31416 && git pull origin main && git add . && git commit -m "Sync autom√°tico" && git push origin main
```

## 12. Buenas pr√°cticas
- Usa mensajes de commit descriptivos
- Verifica siempre el estado antes de hacer push
- No edites directamente desde GitHub Web y desde Debian al mismo tiempo sin hacer pull
- Protege tu token personal y no lo compartas
- Documenta cada cambio relevante en el repositorio

## 13. Referencia del entorno real
- Sistema: Debian 12
- Usuario: root
- Ruta local: /root/GitHub_SNAS/SecureNAS-by-victor31416
- Repositorio: SecureNAS-by-victor31416
- Rama principal: main
- Autenticaci√≥n: token personal GitHub
